#include <iostream>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/ether.h>
#include <arpa/inet.h>
#include <ctype.h>  // isprint

void packet_handler(u_char *args, const struct pcap_pkthdr *header, const u_char *packet) {
    struct ether_header *eth_header = (struct ether_header *) packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        struct ip *ip_header = (struct ip *) (packet + sizeof(struct ether_header));
        int ip_header_len = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            struct tcphdr *tcp_header = (struct tcphdr *) ((u_char*)ip_header + ip_header_len);

            char src_ip[INET_ADDRSTRLEN], dst_ip[INET_ADDRSTRLEN];
            inet_ntop(AF_INET, &(ip_header->ip_src), src_ip, INET_ADDRSTRLEN);
            inet_ntop(AF_INET, &(ip_header->ip_dst), dst_ip, INET_ADDRSTRLEN);

            std::cout << "================= Packet Captured =================" << std::endl;
            std::cout << "[Ethernet Header]" << std::endl;
            std::cout << "  Src MAC: " << ether_ntoa((struct ether_addr *)eth_header->ether_shost) << std::endl;
            std::cout << "  Dst MAC: " << ether_ntoa((struct ether_addr *)eth_header->ether_dhost) << std::endl;

            std::cout << "[IP Header]" << std::endl;
            std::cout << "  Src IP: " << src_ip << std::endl;
            std::cout << "  Dst IP: " << dst_ip << std::endl;

            std::cout << "[TCP Header]" << std::endl;
            std::cout << "  Src Port: " << ntohs(tcp_header->source) << std::endl;
            std::cout << "  Dst Port: " << ntohs(tcp_header->dest) << std::endl;

            const u_char *payload = packet + sizeof(struct ether_header) + ip_header_len + tcp_header->doff * 4;
            int payload_len = header->len - (sizeof(struct ether_header) + ip_header_len + tcp_header->doff * 4);

            if (payload_len > 0) {
                std::cout << "[HTTP Message]" << std::endl;
                int display_len = std::min(payload_len, 500);
                for (int i = 0; i < display_len; ++i) {
                    if (isprint(payload[i]) || payload[i] == '\r' || payload[i] == '\n') {
                        std::cout << (char)payload[i];
                    } else {
                        std::cout << ".";
                    }
                }
                std::cout << std::endl;
            } else {
                std::cout << "[No Payload]" << std::endl;
            }

            std::cout << "===================================================" << std::endl << std::endl;
        }
    }
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    char *dev = pcap_lookupdev(errbuf);

    if (dev == nullptr) {
        std::cerr << "No device found: " << errbuf << std::endl;
        return 1;
    }

    std::cout << "Capturing on device: " << dev << std::endl;

    pcap_t *handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf);
    if (handle == nullptr) {
        std::cerr << "Couldn't open device " << dev << ": " << errbuf << std::endl;
        return 2;
    }

    struct bpf_program fp;
    char filter_exp[] = "tcp port 80";
    bpf_u_int32 net;
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1 || pcap_setfilter(handle, &fp) == -1) {
        std::cerr << "Filter error: " << pcap_geterr(handle) << std::endl;
        return 3;
    }

    pcap_loop(handle, 0, packet_handler, nullptr);
    pcap_close(handle);
    return 0;
}
