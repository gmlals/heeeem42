#include <iostream>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/ether.h>
#include <arpa/inet.h>
#include <cstring>
#include <cctype>

void packet_handler(u_char *args, const struct pcap_pkthdr *header, const u_char *packet) {
    struct ether_header *eth_header = (struct ether_header *) packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        struct ip *ip_header = (struct ip *) (packet + sizeof(struct ether_header));
        int ip_header_len = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            struct tcphdr *tcp_header = (struct tcphdr *) ((u_char*)ip_header + ip_header_len);
            int tcp_header_len = tcp_header->doff * 4;

            u_short src_port = ntohs(tcp_header->source);
            u_short dst_port = ntohs(tcp_header->dest);

            // HTTP(80번 포트) 트래픽만 필터링
            if (src_port != 80 && dst_port != 80) return;

            char src_ip[INET_ADDRSTRLEN], dst_ip[INET_ADDRSTRLEN];
            inet_ntop(AF_INET, &(ip_header->ip_src), src_ip, INET_ADDRSTRLEN);
            inet_ntop(AF_INET, &(ip_header->ip_dst), dst_ip, INET_ADDRSTRLEN);

            std::cout << "=====================================" << std::endl;

            // Ethernet Header
            std::cout << "[Ethernet Header]" << std::endl;
            std::cout << "Src MAC: " << ether_ntoa((struct ether_addr *)eth_header->ether_shost) << std::endl;
            std::cout << "Dst MAC: " << ether_ntoa((struct ether_addr *)eth_header->ether_dhost) << std::endl;
            std::cout << std::endl;

            // IP Header
            std::cout << "[IP Header]" << std::endl;
            std::cout << "Src IP: " << src_ip << std::endl;
            std::cout << "Dst IP: " << dst_ip << std::endl;
            std::cout << std::endl;

            // TCP Header
            std::cout << "[TCP Header]" << std::endl;
            std::cout << "Src Port: " << src_port << std::endl;
            std::cout << "Dst Port: " << dst_port << std::endl;
            std::cout << std::endl;

            // Message
            const u_char *payload = packet + sizeof(struct ether_header) + ip_header_len + tcp_header_len;
            int payload_len = header->len - (sizeof(struct ether_header) + ip_header_len + tcp_header_len);

            if (payload_len > 0) {
                std::cout << "[HTTP Message]" << std::endl;
                int display_len = std::min(payload_len, 500); // 최대 500바이트 출력
                for (int i = 0; i < display_len; ++i) {
                    if (isprint(payload[i]) || payload[i] == '\r' || payload[i] == '\n') {
                        std::cout << (char)payload[i];
                    } else {
                        std::cout << '.';
                    }
                }
                std::cout << std::endl;
            }

            std::cout << "=====================================" << std::endl << std
